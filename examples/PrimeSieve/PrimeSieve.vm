function PrimeSieve.new 0
push constant 2
call Memory.alloc 1
pop pointer 0
push argument 0
pop this 0
push this 0
push constant 1
call Array.fullArray 2
pop this 1
push pointer 0
return
function PrimeSieve.run 4
push argument 0
pop pointer 0
push constant 3
pop local 0
push this 0
call Math.sqrt 1
pop local 1
label LABEL_0
push local 0
push local 1
lt
push local 0
push local 1
eq
or
not
if-goto LABEL_1
push local 0
pop local 2
push local 2
push this 0
lt
pop local 3
label LABEL_2
push local 3
not
if-goto LABEL_3
push this 1
push local 2
pop pointer 1
push that 0
not
if-goto LABEL_4
push local 2
pop local 0
push constant 0
pop local 3
goto LABEL_5
label LABEL_4
push local 2
push this 0
lt
pop local 3
label LABEL_5
push local 3
not
if-goto LABEL_6
push local 2
push constant 2
add
pop local 2
goto LABEL_7
label LABEL_6
label LABEL_7
goto LABEL_2
label LABEL_3
push local 0
push local 0
mult
pop local 2
label LABEL_8
push local 2
push this 0
lt
not
if-goto LABEL_9
push local 2
push this 1
push constant 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 2
push local 0
push constant 2
mult
add
pop local 2
goto LABEL_8
label LABEL_9
push local 0
push constant 2
add
pop local 0
goto LABEL_0
label LABEL_1
push constant 0
return
function PrimeSieve.countPrimes 0
push argument 0
pop pointer 0
push this 1
push constant 1
push constant 1
push this 0
push constant 2
call Array.count 5
return
function PrimeSieve.dispose 0
push argument 0
pop pointer 0
push this 1
call Array.dispose 1
pop temp 0
push pointer 0
call Memory.deAlloc 1
pop temp 0
push constant 0
return
